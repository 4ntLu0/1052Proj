# -*- coding: utf-8 -*-
"""1052 Proj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tmOxvrCFYSmGUzpMryO-00iWgXUgcyG8
"""
# drive installs
!pip install tf-nightly-gpu
!pip install numpy
!pip install google-colab

from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Flatten, Activation, Dense, Dropout, BatchNormalization, MaxPooling2D, Conv2D
from tensorflow.keras.preprocessing import image
from tensorflow.keras.callbacks import ModelCheckpoint
from google.colab import drive
import numpy as np
import time
import h5py
import os

#filepaths
drive.mount('/content/drive')
best_model_savefile = '/content/drive/My Drive/Colab Notebooks/1052 Proj/model3/best_model.hdf5'
best_weights_savefile = '/content/drive/My Drive/Colab Notebooks/1052 Proj/model3/best_weights.hdf5'
final_model_savefile = '/content/drive/My Drive/Colab Notebooks/1052 Proj/model3/final_model.hdf5'
final_weights_savefile = '/content/drive/My Drive/Colab Notebooks/1052 Proj/model3/final_weights.hdf5'

trainset_path = '/content/drive/My Drive/Colab Notebooks/1052 Proj/trainset'
testset_path = '/content/drive/My Drive/Colab Notebooks/1052 Proj/testset'

#callback
weights_callback = ModelCheckpoint(best_weights_savefile, monitor='val_accuracy', verbose=1, save_best_only=True)

#building a sequential model
classifier = Sequential()
classifier.add(Conv2D(32, (3, 3), input_shape=(128, 128, 3), activation='relu'))
classifier.add(Conv2D(64, (5, 5)))
classifier.add(Activation('relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))
classifier.add(Conv2D(128, (9, 9), input_shape=(128, 128, 3), activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))
classifier.add(Flatten())
"""
batch norm screws with predictions somehow
classifier.add(\
    BatchNormalization(axis=1, momentum=0.9, epsilon=0.001, center=True, scale=True, beta_initializer='zeros',\
                       gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones',\
                       beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None))
"""
classifier.add(Dense(units=128, activation='relu'))
classifier.add(Dropout(0.5))
classifier.add(Dense(units=64, activation='relu'))
classifier.add(Dense(units=4, activation='sigmoid'))

classifier.compile(optimizer='rmsprop', loss='mean_squared_error', metrics=['accuracy'])

train_datagen = image.ImageDataGenerator(rescale=1. / 255, shear_range=0.3, zoom_range=0.3, horizontal_flip=True)
test_datagen = image.ImageDataGenerator(rescale=1. / 255)
training_set = test_datagen.flow_from_directory(trainset_path, target_size=(128, 128), batch_size=32, class_mode='categorical')
test_set = test_datagen.flow_from_directory(testset_path, target_size=(128, 128), batch_size=32, class_mode='categorical')

classifier.fit_generator(training_set, steps_per_epoch=200, epochs=8, validation_data=test_set, validation_steps=80, callbacks = [weights_callback])

classifier.save(final_model_savefile)
classifier.save_weights(final_weights_savefile)

model = load_model(final_model_savefile)
model.load_weights(final_weights_savefile)
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

test_image = image.load_img('/content/drive/My Drive/Colab Notebooks/1052 Proj/testset/Prey/mvid0frame5.jpg', target_size=(128, 128))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis=0)
result = model.predict_classes(test_image)
print(training_set.class_indices)
print(result, 'should be: Prey')

test_image = image.load_img('/content/drive/My Drive/Colab Notebooks/1052 Proj/testset/Anni/vidframe0.jpg', target_size=(128, 128))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis=0)
result = model.predict_classes(test_image)
print(result, 'should be: Anni')

test_image = image.load_img('/content/drive/My Drive/Colab Notebooks/1052 Proj/testset/Vitoria/vvid0frame0.jpg', target_size=(128, 128))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis=0)
result = model.predict_classes(test_image)
print(result, 'should be: Vitoria')

test_image = image.load_img('/content/drive/My Drive/Colab Notebooks/1052 Proj/testset/Vitoria/vvid0frame17.jpg', target_size=(128, 128))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis=0)
result = model.predict_classes(test_image)
print(result, 'should be: Vitoria')

test_image = image.load_img('/content/drive/My Drive/Colab Notebooks/1052 Proj/trainset/Mitch/mvid0frame72.jpg', target_size=(128, 128))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis=0)
result = model.predict_classes(test_image)
print(result, 'should be: Mitch')